---
description:
globs:
alwaysApply: true
---

# Cursor Rules for TODO Web Application

## 🎯 핵심 개발 원칙 (Core Development Principles)

### 필수 준수 규칙
1. **프론트엔드 UI**: 실행 코드를 먼저 작성 → 코어 비즈니스 로직만 TDD
2. **백엔드**: 모든 구현을 TDD로 진행
3. **커밋 전**: `docs/checklist.md` 진행상황 업데이트 필수
4. **설계 변경**: `requirements.md`와 `design.md` 수정 필수

### 기술 스택
- **프론트엔드**: React + Vite + TypeScript + Mantine UI
- **백엔드**: Node.js + AWS 서버리스 (Lambda, DynamoDB, API Gateway)
- **상태 관리**: React Context API + useReducer
- **아키텍처**: Clean Architecture + SOLID 원칙

## 🔍 Cursor 분석 프로세스 (Analysis Process)

### 코드 작성 전 필수 확인사항
1. **프로젝트 구조 파악**: 모노레포 구조 이해 (frontend/, backend/, shared/, infrastructure/)
2. **현재 단계 확인**: 1단계(프론트엔드) → 2단계(백엔드) → 3단계(인증) → 4단계(통합) → 5단계(배포)
3. **기술 스택 검증**: Mantine UI 컴포넌트, TypeScript 타입, AWS 서버리스 패턴
4. **문서 일관성**: requirements.md, design.md, checklist.md와 일치 여부 확인

### 코드 생성 시 우선순위
1. **UI 컴포넌트**: Mantine UI 기반, 반응형 디자인, 접근성 고려
2. **타입 정의**: shared/ 디렉토리 공통 타입 활용
3. **상태 관리**: Context API + useReducer 패턴
4. **에러 처리**: 사용자 친화적 메시지, 적절한 바운더리
5. **테스트**: 프론트엔드는 UI 우선, 백엔드는 TDD

### 질문 및 제안 시 고려사항
- **구현 단계 확인**: 현재 구현 단계에 맞는 기능인지 확인
- **UI 컴포넌트 검토**: Mantine UI 컴포넌트 활용 가능성 검토
- **아키텍처 호환성**: AWS 서버리스 아키텍처와의 호환성 확인
- **반응형 디자인**: 모바일 우선 반응형 디자인 적용 여부
- **접근성 준수**: WCAG 2.1 AA 접근성 기준 준수 여부
- **성능 영향**: 구현이 성능에 미치는 영향 고려
- **테스트 가능성**: 테스트 작성 가능성 및 복잡도 검토
- **유지보수성**: 코드의 유지보수성 및 확장성 고려

## 📋 프로젝트 구조

### 모노레포 구조
```
root/
├── frontend/       # React + Mantine 기반 프론트엔드
├── backend/        # Node.js(TypeScript) 기반 백엔드
├── shared/         # 공통 타입, 유틸리티, API 인터페이스
├── infrastructure/ # AWS CDK 등 인프라 코드
└── docs/           # 프로젝트 문서
```

### 프론트엔드 디렉토리 구조
```
frontend/src/
├── assets/            # 이미지, 아이콘 등 정적 자산
├── components/        # 재사용 가능한 UI 컴포넌트
│   ├── common/        # 공통 컴포넌트
│   ├── layout/        # 레이아웃 관련 컴포넌트
│   └── todo/          # Todo 관련 컴포넌트
├── contexts/          # React Context API
├── hooks/             # 커스텀 훅
├── pages/             # 페이지 컴포넌트
├── services/          # 외부 서비스 통신 로직
│   ├── api/           # API 클라이언트
│   └── storage/       # 로컬 스토리지 관리
├── types/             # TypeScript 타입 정의
├── utils/             # 유틸리티 함수
└── App.tsx            # 애플리케이션 진입점
```

## 💻 개발 가이드라인

### TypeScript 규칙
- 모든 코드는 TypeScript로 작성
- 엄격한 타입 체크 활성화
- 인터페이스와 타입을 명확히 정의
- `shared/` 디렉토리의 공통 타입 활용

### React 컴포넌트 규칙
- **함수형 컴포넌트 사용**: 모든 컴포넌트는 함수형으로 작성
- **React Hooks 적극 활용**: useState, useEffect, useReducer, useContext 등
- **Props 인터페이스 명시적 정의**: TypeScript 인터페이스로 Props 타입 정의
- **컴포넌트는 단일 책임 원칙 준수**: 작고 명확한 컴포넌트 작성
- **컴포넌트 네이밍**: PascalCase로 명명하고 `src/components/` 디렉토리에 위치
- **재사용성 고려**: 공통 컴포넌트는 `components/common/`에 배치

### Mantine UI 활용
- **주요 컴포넌트 활용**: Card, Checkbox, Select, TextInput, Button, AppShell, Notification 등
- **디자인 시스템 준수**: 일관된 컬러/타이포그래피/컴포넌트 스타일 유지
- **반응형 레이아웃**: Mantine의 Grid, Flex, Container 등 활용
- **다크 모드/라이트 모드 지원**: Mantine의 ColorSchemeProvider 활용
- **테마 커스터마이징**: MantineProvider로 전역 테마 설정
- **접근성 고려**: Mantine의 내장 접근성 기능 활용

### 상태 관리
- **React Context + useReducer 패턴**: Todo 상태는 Context API와 useReducer로 관리
- **액션 타입 명확히 정의**: 타입 안전성을 위한 액션 타입 정의
- **상태 업데이트 로직 중앙화**: 리듀서에서 상태 업데이트 로직 관리

### 스토리지 전략
- **초기 단계**: 로컬 스토리지 사용
- **백엔드 연결**: API 클라이언트로 전환
- **추상화**: StorageService 인터페이스로 구현체 교체 가능
- **API 통신**: fetch API 또는 Axios 사용 (프로젝트 요구사항에 따라)
- **에러 처리**: 중앙화된 에러 처리 및 재시도 로직

### 네이밍 컨벤션
- **파일 및 디렉토리**: kebab-case (예: `todo-item.tsx`)
- **컴포넌트**: PascalCase (예: `TodoItem`)
- **함수 및 변수**: camelCase (예: `getTodos`)
- **상수**: UPPER_SNAKE_CASE (예: `STORAGE_KEY`)

### 코드 품질
- **DRY 원칙 준수**: 중복 방지 및 재사용 가능한 코드 작성
- **명확한 변수명**: 설명적이고 의미 있는 변수명 사용
- **함수형 프로그래밍**: 함수형 패턴 선호, 불변성 유지
- **성능 최적화**: 불필요한 렌더링 방지, React.memo, useMemo, useCallback 활용
- **코드 스타일**: ESLint, Prettier 설정으로 일관된 코드 스타일 유지
- **타입 안전성**: 엄격한 TypeScript 설정으로 타입 안전성 보장

## 🧪 테스트 전략

### TDD 접근 방식
- **프론트엔드**: UI 구현 시에는 실행 코드를 먼저 작성하고, 코어 비즈니스 로직 구현 시에만 TDD 진행
- **백엔드**: 모든 구현을 TDD로 진행
- **TDD 사이클**: 실패하는 테스트 작성 → 최소한의 코드 작성 → 리팩토링 → 반복

### 프론트엔드 테스트
- **단위 테스트**: Jest로 개별 컴포넌트, 훅, 유틸리티 함수 테스트
- **통합 테스트**: React Testing Library로 컴포넌트 통합 테스트
- **E2E 테스트**: Cypress로 전체 사용자 흐름 테스트
- **테스트 커버리지**: 주요 기능과 컴포넌트에 대한 테스트 필수 작성
- **테스트 유틸리티**: 커스텀 렌더 함수와 헬퍼 함수 활용

### 백엔드 테스트
- **단위 테스트**: Jest로 Lambda 함수 로직 테스트
- **통합 테스트**: AWS SDK로 DynamoDB 통합 테스트
- **API 테스트**: Postman 또는 Insomnia로 API 엔드포인트 테스트

## 🎨 UI/UX 설계

### 디자인 원칙
- **모바일 우선 디자인**: 반응형 디자인으로 모든 디바이스 지원
- **직관적인 사용자 인터페이스**: 사용자가 쉽게 이해할 수 있는 UI
- **접근성 고려**: WCAG 2.1 AA 수준 준수
- **Mantine 디자인 시스템 활용**: 일관된 디자인 언어 사용

### 반응형 디자인
- **모바일 및 데스크톱 지원**: 모든 화면 크기에서 최적화된 경험
- **Mantine 컴포넌트 활용**: Grid, Flex, Container 등으로 레이아웃 구성
- **다크 모드/라이트 모드 지원**: 사용자 선호도에 따른 테마 전환

## 🔒 보안 및 성능

### 보안
- **데이터베이스 쿼리**: Prepared Statement 사용으로 SQL 인젝션 방지
- **JWT 토큰 검증**: API 요청 시 토큰 유효성 검증
- **XSS 및 CSRF 공격 방지**: 적절한 보안 헤더 및 입력 검증
- **입력 데이터 검증**: 모든 사용자 입력에 대한 유효성 검사

### 성능 최적화
- **로딩 성능**: 페이지 로드 시간 < 2초 목표
- **렌더링 최적화**: React.memo, useMemo, useCallback 활용
- **메모이제이션**: 적극적인 메모이제이션으로 성능 향상
- **코드 스플리팅**: Vite의 동적 import를 활용한 코드 분할
- **이미지 최적화**: 적절한 이미지 포맷 및 크기 사용
- **PWA 지원**: Service Worker를 통한 오프라인 지원 및 성능 향상

## 🚀 백엔드 설계

### API 엔드포인트
- **RESTful API 설계**: 표준 HTTP 메서드와 상태 코드 사용
- **엔드포인트**: `/api/todos` - CRUD 작업
- **Lambda 함수**: 각 엔드포인트별 별도 Lambda 함수 구현

### 데이터 모델
- **DynamoDB 테이블**: 서버리스 NoSQL 데이터베이스 활용
- **파티션 키**: `userId` (Cognito 사용자 ID)
- **정렬 키**: `id` (Todo 항목 ID)

### 인증 및 권한
- **AWS Cognito**: 사용자 풀을 통한 인증 관리
- **JWT 토큰 검증**: API Gateway와 통합된 토큰 검증
- **권한 부여**: 사용자별 데이터 접근 제어

## 📦 배포 및 CI/CD

### 배포 전략
- **프론트엔드**: GitHub Pages 배포
- **백엔드**: AWS 서버리스 아키텍처
- **CI/CD**: GitHub Actions 활용

### GitHub Pages 배포 필수 설정
1. **Repository Settings 구성**
   - Settings > Pages > Source: "GitHub Actions" 선택
   - gh-pages 브랜치 자동 생성 및 관리
   
2. **GitHub Actions 권한 설정 (중요!)**
   - Settings > Actions > General > Workflow permissions
   - "Read and write permissions" 선택
   - "Allow GitHub Actions to create and approve pull requests" 체크
   - 이 설정이 없으면 "Resource not accessible by integration" 오류 발생

3. **Vite 빌드 설정**
   ```typescript
   // vite.config.ts
   export default defineConfig({
     plugins: [react()],
     base: '/repository-name/', // GitHub Pages 하위 경로 지원
   });
   ```

### 배포 문제 해결 규칙
1. **자산 파일 404 에러**
   - 원인: Vite base 경로 설정 누락
   - 해결: `vite.config.ts`에 `base: '/repository-name/'` 설정
   - 확인: `dist/index.html`에서 경로가 올바른지 검증

2. **GitHub Actions 권한 오류**
   - 원인: Workflow permissions 설정 부족
   - 해결: Repository Settings > Actions > General에서 권한 설정
   - 확인: `gh run view <run-id>`로 로그 확인

3. **배포 지연 문제**
   - 원인: GitHub Pages CDN 캐시 지연
   - 해결: 30초 대기 후 smoke test 실행, 캐시 무효화 파라미터 사용

### gh cli 활용 규칙
- **배포 상태 확인**: `gh run list --limit 5`
- **로그 확인**: `gh run view <run-id> --log`
- **GitHub Pages 상태**: `gh api repos/username/repository-name/pages`
- **배포 검증**: `curl -s "https://username.github.io/repository-name/"`

### 환경 구성
- **개발 환경**: 로컬 개발 및 테스트
- **스테이징 환경**: 테스트 및 QA
- **프로덕션 환경**: 최종 사용자용

## 📚 문서화

### 프로젝트 문서
- **requirements.md**: 요구사항 정의
- **design.md**: 아키텍처 및 설계 문서
- **checklist.md**: 진행상황 체크리스트
- **커밋 전 체크리스트 업데이트 필수**: 모든 커밋 전에 `docs/checklist.md`에 진행상황을 업데이트
- **설계 변경 시 문서 수정**: 설계 변경 시에는 `requirements.md`와 `design.md`를 반드시 수정

### 주석 및 문서화
- **중요한 로직**: 복잡한 부분에 충분한 주석 작성
- **JSDoc 활용**: 함수 문서화
- **README 파일**: 프로젝트 설정, 실행 방법, 배포 지침 포함

## 🗓️ 구현 단계

### 1단계: 프론트엔드 구현 (로컬 스토리지)
1. 프로젝트 설정 (React + Vite + TypeScript + Mantine)
2. 기본 UI 컴포넌트 구현
3. 상태 관리 구현 (Context API + useReducer)
4. 로컬 스토리지 통합
5. 테스트 작성

### 2단계: 백엔드 구현
1. AWS CDK 프로젝트 설정
2. DynamoDB 테이블 정의
3. Lambda 함수 구현
4. API Gateway 설정
5. 테스트 작성

### 3단계: 인증 시스템 구현
1. Cognito 사용자 풀 설정
2. 로그인/회원가입 UI 구현
3. 인증 통합
4. 테스트 작성

### 4단계: 프론트엔드-백엔드 통합
1. API 클라이언트 구현
2. 로컬 스토리지에서 API로 전환
3. 통합 테스트
4. 버그 수정 및 최적화

### 5단계: 배포 및 CI/CD
1. GitHub Actions 워크플로우 설정
2. 프론트엔드 배포 자동화
3. 백엔드 배포 자동화
4. 최종 테스트 및 검증

## ⚠️ 제약 사항

- **브라우저 호환성**: 최신 버전의 Chrome, Firefox, Safari, Edge 지원
- **접근성**: WCAG 2.1 AA 수준 준수
- **성능**: 모바일 기기에서도 원활하게 작동
- **패키지 업데이트**: 임의로 업데이트하지 않고 사용자 승인 후 진행

## 📖 참고 자료

- [React 공식 문서](https://reactjs.org/docs)
- [Mantine UI 문서](https://mantine.dev/)
- [AWS CDK 문서](https://docs.aws.amazon.com/cdk/)
- [TypeScript 공식 문서](https://www.typescriptlang.org/docs)
- [Jest 테스팅 문서](https://jestjs.io/docs/getting-started)